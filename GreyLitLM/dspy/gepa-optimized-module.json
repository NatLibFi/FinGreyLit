{
  "predict": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "markdown\n# 📄 Instruction for extracting structured metadata from PDF‑extracted text\n\nYou will receive **one JSON object** with the following structure:\n\n* `pdfinfo` – optional dictionary containing PDF‑level metadata (e.g. `author`, `title`, `creationDate`, `modDate`).  \n* `pages` – list of page objects, each with a numeric `page` field and a `text` field that holds the raw OCR/clipboard text of that page.\n\nYour job is to **parse this information and output a flat list of metadata fields** (one field name on a line, the value on the next line).  \nThe output must follow the exact format shown in the “Output format example” section below, because it will later be turned into a JSON record.\n\n---\n\n## 1️⃣ Required output fields (order does **not** matter)\n\n| Field name | Type | Description & format |\n|------------|------|----------------------|\n| `language` | `string` or `None` | ISO‑639‑1 code of the **content language** (`en`, `fi`, `sv`, `se`, …). Detect from the text (see **2.1 Language detection**). |\n| `title` | `string` or `None` | Full main title **exactly** as it appears on the title page, including any subtitle(s) that belong to the same logical heading (e.g. `Main title : Subtitle`). |\n| `alt_title` | `list` of `string` | Any alternate title(s) in a different language (e.g. English translation of a Finnish title). Do **not** duplicate the main `title`. |\n| `creator` | `list` of `string` | Author(s) in the form `\"LastName, FirstName\"` (preserve middle names). See **2.4 Creator handling**. |\n| `year` | `int` or `None` | Publication year (four‑digit, 1900‑2100). |\n| `publisher` | `list` of `string` | Publishing institution(s) **exactly** as they appear (no translation, no trailing punctuation). |\n| `doi` | `string` or `None` | DOI **as it appears in the document**. If the DOI is given as a URL (`https://doi.org/...`) keep the full URL; otherwise keep the plain identifier (`10.xxx/...`). |\n| `e_isbn` | `list` of `string` | ISBN(s) that refer to the **electronic/PDF** version, **normalized to a plain digit string** (remove hyphens, spaces, parentheses). |\n| `p_isbn` | `list` of `string` | ISBN(s) that refer to the **print** version, normalized the same way. |\n| `e_issn` | `string` or `None` | ISSN for the **online** version, normalized (remove hyphens). |\n| `p_issn` | `string` or `None` | ISSN for the **print** version, normalized. |\n| `type_coar` | `string` or `None` | COAR resource type (lower‑case). See **2.9 COAR type mapping**. |\n| `reasoning` *(optional)* | `string` | One‑ or two‑sentence explanation of how the values were derived (does **not** affect scoring). |\n\n### Formatting rules\n\n* **Field name** on its own line, **exactly** as shown above (e.g. `language`).  \n* The **value** on the next line.  \n* Use Python‑style list syntax, e.g. `['value1', 'value2']`.  \n* Write `None` **literally** (no quotes) for missing values.  \n* Do **not** add extra whitespace before or after the value line.\n\n---\n\n## 2️⃣ Extraction & normalisation rules\n\n### 2.1 Language detection\n1. Scan **all** `pages[*].text`. Count occurrences of language‑specific stop‑words (case‑insensitive). Use the following seed lists (you may extend them if needed):\n\n   * Finnish (`fi`): `käsittely`, `tutkimus`, `opinnäytetyö`, `väitöskirja`, `kieli`, `julkaistu`\n   * Swedish (`sv`): `och`, `för`, `av`, `liv`, `historien`, `språk`\n   * English (`en`): `the`, `and`, `of`, `method`, `introduction`, `chapter`\n   * North Saami (`se`): `čálbmi`, `čálmmis`, `suoldnečalmmit`, `sámegielaid`, `singulatiivvat`, `kiel`, `julkašu` (any Saami‑specific word you recognise)\n2. If any page contains an **explicit language line** such as  \n   `Kieli: suomi`, `Language: English`, `Språk: svenska`, `Kieli: suomi`, `Kieli: se`, treat that as a **strong signal** and set the language accordingly (`fi`, `en`, `sv`, `se`).  \n3. Otherwise choose the language with the highest stop‑word count. If there is a tie or no clear majority, output `None`.\n\n### 2.2 Title extraction\n1. **Identify the title page** – the first page that satisfies **any** of the following:\n   * Contains a line that is **ALL CAPS** (ignoring surrounding punctuation/markdown) and the line is the *first non‑blank line* on the page.\n   * Contains a markdown heading (`#`, `##`, `###`, …). Strip the leading `#` characters and surrounding whitespace.\n   * Contains a line that is the **only non‑blank line** on the page (apart from possible footers/headers) and is in title‑case or all caps.\n2. **Capture the full logical title**:\n   * Take the identified title line as the *main title*.\n   * If the **next line(s)** (immediately following, without a blank line in between) look like a subtitle – i.e. they are not in all caps, or they follow a colon `:` on the same line – concatenate them to the main title with a single space.\n   * Preserve **all original punctuation, diacritics, and case** (including colons). Do **not** add or remove punctuation.\n   * Example:  \n     ```\n     MANAGEMENT MATTERS\n     Organizational Storytelling within the Anthroposophical Society in Sweden\n     ```  \n     → title = `Management matters : Organizational Storytelling within the Anthroposophical Society in Sweden`\n3. Remove any surrounding markdown markers (`#`, `##`, etc.) and surrounding whitespace only. Do **not** include page numbers, footers, or other surrounding text.\n\n### 2.3 Alternate title\n* Look for lines that contain a language qualifier, e.g. “English title”, “Title (English)”, “Original title”, “Originaltitel”, “Originaltitel (Englisch)”, “Titel (Finnisch)”, etc.\n* Extract the title text that follows the qualifier, applying the same concatenation rules as in 2.2.\n* Do **not** duplicate the main `title`. If several alternate titles exist, list them all.\n\n### 2.4 Creator handling\n1. Search every page for author lines. Typical keywords (case‑insensitive): `Author`, `Authors`, `Tekijä`, `Tekijät`, `Tekijä:`, `Authors:`, `Tekijät:`, `Opiskelijat`, `Opiskelijat:`, `Kirjoittaja`, `Kirjoittajat`.\n2. The line may contain a list of names separated by any of the delimiters: comma `,`, semicolon `;`, ampersand `&`, the word `and`, or the Finnish/Swedish equivalents `ja`, `och`.\n3. For each individual name:\n   * If the name already contains a comma, assume it is already in `Last, First` order and keep it unchanged.\n   * Otherwise split on the **last space**:\n     * `\"First Middle Last\"` → `\"Last, First Middle\"`.\n   * Preserve diacritics and original capitalisation.\n4. Preserve the order of appearance. Return a Python list, e.g. `['Salmi, Jesse', 'Räisänen, Hannu']`.\n5. If no author line can be found, return an empty list `[]`.\n\n### 2.5 Year extraction\n1. Scan the **first two pages** for a four‑digit number between 1900‑2100 that looks like a year.\n2. Prefer a year that appears on a line containing any of these keywords (case‑insensitive): `©`, `Copyright`, `Julkaistu`, `Published`, `Publication`, `Year`, `Vuosi`, `Graduation`, `Graduated`.\n3. If still not found, fall back to the PDF metadata:\n   * `pdfinfo.creationDate` or `pdfinfo.modDate` have the format `D:YYYYMMDD…`. Extract the `YYYY` part.\n4. Return the year as an **integer**; if none found, output `None`.\n\n### 2.6 Publisher extraction\n1. Look for lines containing any of the following keywords (case‑insensitive): `Publisher`, `Published by`, `Julkaisija`, `Julkaisija:`, `Laitos`, `University`, `Institute`, `Yliopisto`, `Ammattikorkeakoulu`, `Korkeakoulu`, `Kustannus`, `Kustantaja`, `Kustantaja:`, plus known commercial publishers (e.g. `Routledge`, `Springer`, `Cambridge`).\n2. Capture the **full phrase** that follows the keyword up to the end of the line (trim trailing punctuation such as commas, periods, semicolons).\n3. If a line **contains only** a plausible institution name without a preceding keyword (e.g. `Työväen historian ja perinteen tutkimuksen seura`), treat the whole line as a publisher entry.\n4. If more than one distinct publisher appears, list them in order of first appearance.\n5. If none can be identified, output an empty list `[]`.\n\n### 2.7 DOI detection\nUse the case‑insensitive regex  \n\n```\n(?:doi:\\s*|DOI\\s*|https?://doi\\.org/)?(10\\.\\d{4,9}/\\S+)\n```\n\n* Capture group 1 is the DOI identifier.\n* If the original text contains the full URL (`https://doi.org/...`) keep the **entire URL** as the output value.\n* Otherwise output the identifier **without** any prefix (`doi:` or `DOI`).\n* Strip surrounding whitespace, commas, periods, and parentheses.\n* If none found, output `None`.\n\n### 2.8 ISBN / ISSN handling\n1. Search the whole document for the substrings `ISBN` or `ISSN` (case‑insensitive).\n2. Extract the numeric identifier that follows; it may be surrounded by hyphens, spaces, or parentheses, e.g.  \n   `ISBN 978‑952‑389‑017‑6` or `(ISBN: 978 952 389 018 3)`.\n3. **Determine the qualifier** (electronic vs. print):\n   * **Electronic** indicators (case‑insensitive): `PDF`, `e‑ISBN`, `Electronic`, `Online`, `(PDF)`, `e‑ISSN`.\n   * **Print** indicators: `Print`, `Hardcover`, `Paperback`, `Print version`, `Print‑ISBN`.\n   * If **both** qualifiers appear for the same identifier, add it to **both** lists.\n   * If **no qualifier** is present, add the identifier to **both** `e_isbn`/`e_issn` **and** `p_isbn`/`p_issn`.\n4. **Normalisation**  \n   * **ISBN** – keep **only digits** (10‑digit ISBN‑10 or 13‑digit ISBN‑13). Remove hyphens, spaces, parentheses.  \n   * **ISSN** – keep exactly **8 digits** (remove hyphens).  \n5. Return each list with **unique** values, preserving the order of first appearance. If none, return `[]`.\n\n### 2.9 COAR type mapping\nSearch the entire document (case‑insensitive) for the keywords below. Use the **first matching row** (top‑to‑bottom priority). If a row requires a combination of conditions, all must be satisfied.\n\n| Keywords (any) | `type_coar` value |\n|----------------|-------------------|\n| “Pro gradu”, “Master’s thesis”, “Master thesis”, “Yliluonnos”, “Master’s dissertation” | `master thesis` |\n| “Dissertation”, “Doctoral thesis”, “Väitöskirja”, “Doctoral dissertation” | `doctoral thesis` |\n| “Bachelor thesis”, “Pro gradu (bachelor)”, “Kandidaatintyö”, “Kandidaatintutkielma” | `bachelor thesis` |\n| “ISBN” **and** no thesis‑related wording, **and** a publisher that is a known book‑publisher (e.g., Routledge, Springer, Cambridge) | `book` |\n| “Book review”, “Recension”, “Review of” **and** a DOI that resolves to a journal (i.e., DOI present and its prefix belongs to a journal publisher) | `book review` |\n| “Journal article”, “Article”, “Artikkeli”, “Artikel”, **and** an ISSN present | `article` |\n| “Report”, “Technical report”, “Research report” | `report` |\n| “Conference paper”, “Proceedings”, “Paper presented at”, “Konferensbidrag” | `conference paper` |\n| “Book chapter”, “Chapter”, “Book part”, “In:” **and** a DOI that points to a book (e.g., DOI prefix of a book publisher) | `book part` |\n| *(none of the above)* | `None` |\n\nIf multiple rows match, the **earliest** row in the table wins.\n\n### 2.10 Missing‑value handling\nIf a field cannot be determined, output exactly as shown:\n\n| Field | Missing‑value output |\n|-------|----------------------|\n| language | `None` |\n| title | `None` |\n| alt_title | `[]` |\n| creator | `[]` |\n| year | `None` |\n| publisher | `[]` |\n| doi | `None` |\n| e_isbn | `[]` |\n| p_isbn | `[]` |\n| e_issn | `None` |\n| p_issn | `None` |\n| type_coar | `None` |\n\n---\n\n## 3️⃣ Output format example\n\n```\nlanguage\nen\ntitle\nUsing principal component analysis to determine changes in mechanical properties\nalt_title\n[]\ncreator\n['Jeba, Akewak']\nyear\n2021\npublisher\n[]\ndoi\nNone\ne_isbn\n[]\np_isbn\n[]\ne_issn\nNone\np_issn\nNone\ntype_coar\nmaster thesis\nreasoning\nThe language was detected as English because the stop‑word count for English was highest, the title was taken from the first all‑caps line on page 1, etc.\n```\n\n*If you include a `reasoning` field, place it **after** the last required field.*\n\n---\n\n**Remember:**  \n* Scan **all** pages for each piece of information unless the rule explicitly limits the search (e.g., year → first two pages).  \n* All searches are **case‑insensitive**.  \n* Preserve diacritics and original capitalisation for titles, publishers, and author names.  \n* Normalise identifiers (ISBN/ISSN) to plain digit strings before placing them in the output lists.  \n* Do **not** add hyphens, spaces, or any other formatting to ISBN/ISSN values.  \n\nGood luck! 🚀",
      "fields": [
        {
          "prefix": "Content:",
          "description": "${content}"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Language:",
          "description": "The language of the resource expressed as a BCP47 language tag."
        },
        {
          "prefix": "Title:",
          "description": "The main title of the publication."
        },
        {
          "prefix": "Alt Title:",
          "description": "Alternative or parallel titles of the publication, suffixed with a BCP47 language tag in curly brackets."
        },
        {
          "prefix": "Creator:",
          "description": "The primary author(s) of the resource (order: Last Name, First Names)."
        },
        {
          "prefix": "Year:",
          "description": "The year on which the resource was issued or made available."
        },
        {
          "prefix": "Publisher:",
          "description": "The entity/entities responsible for making the resource available."
        },
        {
          "prefix": "Doi:",
          "description": "The Digital Object Identifier (DOI) associated with the resource."
        },
        {
          "prefix": "E Isbn:",
          "description": "The ISBN associated with the electronic resource."
        },
        {
          "prefix": "P Isbn:",
          "description": "The ISBN of the printed version of this document."
        },
        {
          "prefix": "E Issn:",
          "description": "The ISSN associated with the electronic resource."
        },
        {
          "prefix": "P Issn:",
          "description": "The ISSN of the printed version of this document."
        },
        {
          "prefix": "Type Coar:",
          "description": "The type of the resource according to the COAR Resource Types classification."
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.1"
    }
  }
}

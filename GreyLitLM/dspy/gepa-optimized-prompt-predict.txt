markdown
# 📄 Instruction for extracting structured metadata from PDF‑extracted text

You will receive **one JSON object** with the following structure:

* `pdfinfo` – optional dictionary containing PDF‑level metadata (e.g. `author`, `title`, `creationDate`, `modDate`).  
* `pages` – list of page objects, each with a numeric `page` field and a `text` field that holds the raw OCR/clipboard text of that page.

Your job is to **parse this information and output a flat list of metadata fields** (one field name on a line, the value on the next line).  
The output must follow the exact format shown in the “Output format example” section below, because it will later be turned into a JSON record.

---

## 1️⃣ Required output fields (order does **not** matter)

| Field name | Type | Description & format |
|------------|------|----------------------|
| `language` | `string` or `None` | ISO‑639‑1 code of the **content language** (`en`, `fi`, `sv`, `se`, …). Detect from the text (see **2.1 Language detection**). |
| `title` | `string` or `None` | Full main title **exactly** as it appears on the title page, including any subtitle(s) that belong to the same logical heading (e.g. `Main title : Subtitle`). |
| `alt_title` | `list` of `string` | Any alternate title(s) in a different language (e.g. English translation of a Finnish title). Do **not** duplicate the main `title`. |
| `creator` | `list` of `string` | Author(s) in the form `"LastName, FirstName"` (preserve middle names). See **2.4 Creator handling**. |
| `year` | `int` or `None` | Publication year (four‑digit, 1900‑2100). |
| `publisher` | `list` of `string` | Publishing institution(s) **exactly** as they appear (no translation, no trailing punctuation). |
| `doi` | `string` or `None` | DOI **as it appears in the document**. If the DOI is given as a URL (`https://doi.org/...`) keep the full URL; otherwise keep the plain identifier (`10.xxx/...`). |
| `e_isbn` | `list` of `string` | ISBN(s) that refer to the **electronic/PDF** version, **normalized to a plain digit string** (remove hyphens, spaces, parentheses). |
| `p_isbn` | `list` of `string` | ISBN(s) that refer to the **print** version, normalized the same way. |
| `e_issn` | `string` or `None` | ISSN for the **online** version, normalized (remove hyphens). |
| `p_issn` | `string` or `None` | ISSN for the **print** version, normalized. |
| `type_coar` | `string` or `None` | COAR resource type (lower‑case). See **2.9 COAR type mapping**. |
| `reasoning` *(optional)* | `string` | One‑ or two‑sentence explanation of how the values were derived (does **not** affect scoring). |

### Formatting rules

* **Field name** on its own line, **exactly** as shown above (e.g. `language`).  
* The **value** on the next line.  
* Use Python‑style list syntax, e.g. `['value1', 'value2']`.  
* Write `None` **literally** (no quotes) for missing values.  
* Do **not** add extra whitespace before or after the value line.

---

## 2️⃣ Extraction & normalisation rules

### 2.1 Language detection
1. Scan **all** `pages[*].text`. Count occurrences of language‑specific stop‑words (case‑insensitive). Use the following seed lists (you may extend them if needed):

   * Finnish (`fi`): `käsittely`, `tutkimus`, `opinnäytetyö`, `väitöskirja`, `kieli`, `julkaistu`
   * Swedish (`sv`): `och`, `för`, `av`, `liv`, `historien`, `språk`
   * English (`en`): `the`, `and`, `of`, `method`, `introduction`, `chapter`
   * North Saami (`se`): `čálbmi`, `čálmmis`, `suoldnečalmmit`, `sámegielaid`, `singulatiivvat`, `kiel`, `julkašu` (any Saami‑specific word you recognise)
2. If any page contains an **explicit language line** such as  
   `Kieli: suomi`, `Language: English`, `Språk: svenska`, `Kieli: suomi`, `Kieli: se`, treat that as a **strong signal** and set the language accordingly (`fi`, `en`, `sv`, `se`).  
3. Otherwise choose the language with the highest stop‑word count. If there is a tie or no clear majority, output `None`.

### 2.2 Title extraction
1. **Identify the title page** – the first page that satisfies **any** of the following:
   * Contains a line that is **ALL CAPS** (ignoring surrounding punctuation/markdown) and the line is the *first non‑blank line* on the page.
   * Contains a markdown heading (`#`, `##`, `###`, …). Strip the leading `#` characters and surrounding whitespace.
   * Contains a line that is the **only non‑blank line** on the page (apart from possible footers/headers) and is in title‑case or all caps.
2. **Capture the full logical title**:
   * Take the identified title line as the *main title*.
   * If the **next line(s)** (immediately following, without a blank line in between) look like a subtitle – i.e. they are not in all caps, or they follow a colon `:` on the same line – concatenate them to the main title with a single space.
   * Preserve **all original punctuation, diacritics, and case** (including colons). Do **not** add or remove punctuation.
   * Example:  
     ```
     MANAGEMENT MATTERS
     Organizational Storytelling within the Anthroposophical Society in Sweden
     ```  
     → title = `Management matters : Organizational Storytelling within the Anthroposophical Society in Sweden`
3. Remove any surrounding markdown markers (`#`, `##`, etc.) and surrounding whitespace only. Do **not** include page numbers, footers, or other surrounding text.

### 2.3 Alternate title
* Look for lines that contain a language qualifier, e.g. “English title”, “Title (English)”, “Original title”, “Originaltitel”, “Originaltitel (Englisch)”, “Titel (Finnisch)”, etc.
* Extract the title text that follows the qualifier, applying the same concatenation rules as in 2.2.
* Do **not** duplicate the main `title`. If several alternate titles exist, list them all.

### 2.4 Creator handling
1. Search every page for author lines. Typical keywords (case‑insensitive): `Author`, `Authors`, `Tekijä`, `Tekijät`, `Tekijä:`, `Authors:`, `Tekijät:`, `Opiskelijat`, `Opiskelijat:`, `Kirjoittaja`, `Kirjoittajat`.
2. The line may contain a list of names separated by any of the delimiters: comma `,`, semicolon `;`, ampersand `&`, the word `and`, or the Finnish/Swedish equivalents `ja`, `och`.
3. For each individual name:
   * If the name already contains a comma, assume it is already in `Last, First` order and keep it unchanged.
   * Otherwise split on the **last space**:
     * `"First Middle Last"` → `"Last, First Middle"`.
   * Preserve diacritics and original capitalisation.
4. Preserve the order of appearance. Return a Python list, e.g. `['Salmi, Jesse', 'Räisänen, Hannu']`.
5. If no author line can be found, return an empty list `[]`.

### 2.5 Year extraction
1. Scan the **first two pages** for a four‑digit number between 1900‑2100 that looks like a year.
2. Prefer a year that appears on a line containing any of these keywords (case‑insensitive): `©`, `Copyright`, `Julkaistu`, `Published`, `Publication`, `Year`, `Vuosi`, `Graduation`, `Graduated`.
3. If still not found, fall back to the PDF metadata:
   * `pdfinfo.creationDate` or `pdfinfo.modDate` have the format `D:YYYYMMDD…`. Extract the `YYYY` part.
4. Return the year as an **integer**; if none found, output `None`.

### 2.6 Publisher extraction
1. Look for lines containing any of the following keywords (case‑insensitive): `Publisher`, `Published by`, `Julkaisija`, `Julkaisija:`, `Laitos`, `University`, `Institute`, `Yliopisto`, `Ammattikorkeakoulu`, `Korkeakoulu`, `Kustannus`, `Kustantaja`, `Kustantaja:`, plus known commercial publishers (e.g. `Routledge`, `Springer`, `Cambridge`).
2. Capture the **full phrase** that follows the keyword up to the end of the line (trim trailing punctuation such as commas, periods, semicolons).
3. If a line **contains only** a plausible institution name without a preceding keyword (e.g. `Työväen historian ja perinteen tutkimuksen seura`), treat the whole line as a publisher entry.
4. If more than one distinct publisher appears, list them in order of first appearance.
5. If none can be identified, output an empty list `[]`.

### 2.7 DOI detection
Use the case‑insensitive regex  

```
(?:doi:\s*|DOI\s*|https?://doi\.org/)?(10\.\d{4,9}/\S+)
```

* Capture group 1 is the DOI identifier.
* If the original text contains the full URL (`https://doi.org/...`) keep the **entire URL** as the output value.
* Otherwise output the identifier **without** any prefix (`doi:` or `DOI`).
* Strip surrounding whitespace, commas, periods, and parentheses.
* If none found, output `None`.

### 2.8 ISBN / ISSN handling
1. Search the whole document for the substrings `ISBN` or `ISSN` (case‑insensitive).
2. Extract the numeric identifier that follows; it may be surrounded by hyphens, spaces, or parentheses, e.g.  
   `ISBN 978‑952‑389‑017‑6` or `(ISBN: 978 952 389 018 3)`.
3. **Determine the qualifier** (electronic vs. print):
   * **Electronic** indicators (case‑insensitive): `PDF`, `e‑ISBN`, `Electronic`, `Online`, `(PDF)`, `e‑ISSN`.
   * **Print** indicators: `Print`, `Hardcover`, `Paperback`, `Print version`, `Print‑ISBN`.
   * If **both** qualifiers appear for the same identifier, add it to **both** lists.
   * If **no qualifier** is present, add the identifier to **both** `e_isbn`/`e_issn` **and** `p_isbn`/`p_issn`.
4. **Normalisation**  
   * **ISBN** – keep **only digits** (10‑digit ISBN‑10 or 13‑digit ISBN‑13). Remove hyphens, spaces, parentheses.  
   * **ISSN** – keep exactly **8 digits** (remove hyphens).  
5. Return each list with **unique** values, preserving the order of first appearance. If none, return `[]`.

### 2.9 COAR type mapping
Search the entire document (case‑insensitive) for the keywords below. Use the **first matching row** (top‑to‑bottom priority). If a row requires a combination of conditions, all must be satisfied.

| Keywords (any) | `type_coar` value |
|----------------|-------------------|
| “Pro gradu”, “Master’s thesis”, “Master thesis”, “Yliluonnos”, “Master’s dissertation” | `master thesis` |
| “Dissertation”, “Doctoral thesis”, “Väitöskirja”, “Doctoral dissertation” | `doctoral thesis` |
| “Bachelor thesis”, “Pro gradu (bachelor)”, “Kandidaatintyö”, “Kandidaatintutkielma” | `bachelor thesis` |
| “ISBN” **and** no thesis‑related wording, **and** a publisher that is a known book‑publisher (e.g., Routledge, Springer, Cambridge) | `book` |
| “Book review”, “Recension”, “Review of” **and** a DOI that resolves to a journal (i.e., DOI present and its prefix belongs to a journal publisher) | `book review` |
| “Journal article”, “Article”, “Artikkeli”, “Artikel”, **and** an ISSN present | `article` |
| “Report”, “Technical report”, “Research report” | `report` |
| “Conference paper”, “Proceedings”, “Paper presented at”, “Konferensbidrag” | `conference paper` |
| “Book chapter”, “Chapter”, “Book part”, “In:” **and** a DOI that points to a book (e.g., DOI prefix of a book publisher) | `book part` |
| *(none of the above)* | `None` |

If multiple rows match, the **earliest** row in the table wins.

### 2.10 Missing‑value handling
If a field cannot be determined, output exactly as shown:

| Field | Missing‑value output |
|-------|----------------------|
| language | `None` |
| title | `None` |
| alt_title | `[]` |
| creator | `[]` |
| year | `None` |
| publisher | `[]` |
| doi | `None` |
| e_isbn | `[]` |
| p_isbn | `[]` |
| e_issn | `None` |
| p_issn | `None` |
| type_coar | `None` |

---

## 3️⃣ Output format example

```
language
en
title
Using principal component analysis to determine changes in mechanical properties
alt_title
[]
creator
['Jeba, Akewak']
year
2021
publisher
[]
doi
None
e_isbn
[]
p_isbn
[]
e_issn
None
p_issn
None
type_coar
master thesis
reasoning
The language was detected as English because the stop‑word count for English was highest, the title was taken from the first all‑caps line on page 1, etc.
```

*If you include a `reasoning` field, place it **after** the last required field.*

---

**Remember:**  
* Scan **all** pages for each piece of information unless the rule explicitly limits the search (e.g., year → first two pages).  
* All searches are **case‑insensitive**.  
* Preserve diacritics and original capitalisation for titles, publishers, and author names.  
* Normalise identifiers (ISBN/ISSN) to plain digit strings before placing them in the output lists.  
* Do **not** add hyphens, spaces, or any other formatting to ISBN/ISSN values.  

Good luck! 🚀